name: code-quality
on:
  push:
    branches:
      - main
  pull_request:
  schedule:
    - cron: '28 20 * * 0'

env:
  APP_URL: ${{ secrets.APP_URL }}
  COOKIE_DOMAIN: ${{ secrets.COOKIE_DOMAIN }}
  COOKIE_NAME: ${{ secrets.COOKIE_NAME }}
  COOKIE_SALT: ${{ secrets.COOKIE_SALT }}
  COOKIE_SECRET: ${{ secrets.COOKIE_SECRET }}
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/rocco
  GOOGLE_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
  VITE_API_URL: ""

jobs:
  code-quality:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: üõë Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: üèóÔ∏è Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          run_install: true

      - name: üì¶ Install dependencies
        run: npm install

      - name: üì• Generate artifacts
        run: npm run prisma:generate

      - name: üî¨ Lint & Type check
        run: npm run lint

      - name: üß™ Unit tests
        run: npx turbo run test --force

      - name: üß™ End-to-end tests
        # Uses the official Cypress GitHub action https://github.com/cypress-io/github-action
        uses: cypress-io/github-action@v2
        # uses: cypress-io/github-action@v5
        with:
          build: npm run build
          # Starts web server for E2E tests - replace with your own server invocation
          # https://docs.cypress.io/guides/continuous-integration/introduction#Boot-your-server
          start: npx turbo run dev --parallel
          command: npm run test:e2e:ci
          # Address to wait for before running tests
          # wait-on: 'http://localhost:53422' 
          # Records to Cypress Cloud
          # https://docs.cypress.io/guides/cloud/projects#Set-up-a-project-to-record
          # record: true
          # parallel: true # Runs test in parallel using settings above
        env:
          # For recording and parallelization to work you must set your CYPRESS_RECORD_KEY
          # in GitHub repo ‚Üí Settings ‚Üí Secrets ‚Üí Actions
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_PROJECT_ID }}
          # Creating a token https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VITE_API_URL: http://127.0.0.1:4444
          VITE_GOOGLE_API_KEY: ${{ secrets.VITE_GOOGLE_API_KEY }}

      # - name: ‚¨ÜÔ∏è Upload coverage
      #   uses: codecov/codecov-action@v3
      #   with:
      #     fail_ci_if_error: true
      #   env:
      #     CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  analyze:
    name: Analyze
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners
    # Consider using larger runners for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby', 'swift' ]
        # Use only 'java' to analyze code written in Java, Kotlin or both
        # Use only 'javascript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality


    # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines.
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    # - run: |
    #     echo "Run, Build Application using script"
    #     ./location_of_script_within_repo/buildscript.sh

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

